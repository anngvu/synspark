type: "quiz"
level: "intermediate-advanced"
meta:
  source: "2024-07-24.txt"
  source_date: "2024-07-24"
  source_timestamps: ["2024-07-24 12:19:09", "2024-07-24 12:20:38"]
  key_concepts: ["access control metadata", "data annotation", "portal filtering", "API automation"]
  updated_approach: true
  multiple_correct: true

context: |
  **Annotating Files with Access Status for Portal Discovery**
  
  Research portals need to help users understand which datasets are immediately accessible versus those requiring additional steps or still under embargo. Creating systematic annotations about access requirements enables better data discovery and filtering.

question: "Emma, a portal owner, is thinking of features that can be on the roadmap for next year. She wants to enhance the portal by having files annotated with an easy-to-understand access status (public without access requirements, public but has access requirements) to enable better filtering on the portal. For example, some users expressed being able to to filter out controlled-access data during browsing. Emma is already thinking about getting access requirements info and adding the appropriate annotation back to the files, perhaps as a daily automated job. The portal currently has 293,856 files and continues to grow. What can make sense below given the outcome desired?"

answers:
  - text: "Recommend making authenticated requests using Emma's account to get file info to summarize using the endpoint `GET /entity/{id}/actions/download`"
    correct: false
    message: "It doesn't make sense to use Emma's account since the access info retrieved will not be representative or useful from the perspective of other users. Moreover, making 293,856+ individual API calls weekly would be inefficient and potentially impact system performance."
    points: 0
  - text: "Recommend making unauthenticateds requests to get file info to summarize using the endpoint `GET /entity/{id}/actions/download`"
    correct: false
    message: "While this provides detailed per-file information from the desired perspective, making 293,856+ individual API calls weekly would be inefficient and potentially impact system performance."
    points: 0
  - text: "Recommend using table queries with `includeActionsRequired` parameter to batch process files and get summary information"
    correct: true
    message: "Correct! Table queries can process multiple files efficiently and include actions required summary data, making it much more scalable for large datasets than individual file queries."
    points: 1
  - text: "Suggest submitting a Synapse feature request where Synapse can materialize the desired annotation summarizing the data access status for all files."
    correct: true
    message: "Not bad! This is a scalable and future-forward approach that might benefit all portals, not just Emma's portal, and update the status of the files in real-time."
    points: 2
  - text: "Recommend using the async download list service to get bulk access information for all files"
    correct: false
    message: "The async download list service provides counts but not the detailed per-file access information needed for creating individual file annotations."
    points: 0
  - text: "Recommend manually categorizing files based on project-level access settings rather than individual file queries"
    correct: false
    message: "Project-level settings don't capture file-specific access requirements, and manual categorization wouldn't scale or stay current with changing access controls."
    points: 0

allow_retry: true
random_answer_order: true
